# BiasDetector Deployment Guide

This guide provides instructions for deploying the BiasDetector application in different environments.

## Local Deployment

### Prerequisites
- Python 3.9+ installed
- Git (optional, for cloning the repository)

### Setup

1. **Get the code**
   ```
   git clone https://github.com/yourusername/biasdetector.git
   cd biasdetector
   ```
   Alternatively, download and extract the BiasDetector.zip file.

2. **Install dependencies**
   ```
   pip install -r requirements.txt
   ```

3. **Set up environment variables**
   For full functionality with AI bias detection, you need an OpenAI API key:
   
   On Windows:
   ```
   set OPENAI_API_KEY=your_api_key_here
   ```
   
   On macOS/Linux:
   ```
   export OPENAI_API_KEY=your_api_key_here
   ```
   
   Note: Without an API key, the application will run in demo mode with simulated responses.

### Running the Application

You can run the application in several ways:

#### Using the main.py script (Recommended)

For development with auto-reloading:
```
python main.py --dev
```

For production:
```
python main.py
```

#### Using Flask command

```
python -m flask --app main run --host=0.0.0.0 --port=5000 --reload
```

#### Using Gunicorn (Linux/macOS)

For production deployments:
```
gunicorn --bind 0.0.0.0:5000 main:app
```

### Accessing the Application

Once running, access the application at:
- Web interface: http://localhost:5000
- API health check: http://localhost:5000/health

## Cloud Deployment

### Replit Deployment

The application is configured to run on Replit with minimal setup:

1. Create a new Replit project and import the code
2. Add your OPENAI_API_KEY as a secret in the Replit secrets panel
3. Run the application

### Other Cloud Platforms

The application can be deployed to various cloud platforms:

#### Heroku

1. Create a Procfile with:
   ```
   web: gunicorn main:app
   ```
2. Set environment variables in Heroku dashboard
3. Deploy using Heroku CLI or GitHub integration

#### Google Cloud Run

1. Create a Dockerfile
2. Build and push container
3. Deploy to Cloud Run with appropriate environment variables

## Extension Deployment

To use the Chrome extension with your deployed backend:

1. In the extension's options, set the API URL to your deployed backend URL
2. Optionally set your OpenAI API key in the extension settings

## Troubleshooting

- If you encounter connection issues, ensure your firewall allows connections on port 5000
- If you get API errors, check that your OPENAI_API_KEY is correct and has sufficient quota
- If the extension can't connect to the backend, verify the API URL in extension settings